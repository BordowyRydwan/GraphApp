<UserControl x:Class="GraphApp.Views.HelpView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:GraphApp.Views"
             mc:Ignorable="d" 
             d:DesignHeight="768" d:DesignWidth="1024">

    <UserControl.Resources>
        <Style TargetType="Paragraph">
            <Setter Property="Padding" Value="10,0,100,0"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontWeight" Value="Light"/>
        </Style>
        <Style x:Key="TextHeader" TargetType="Paragraph">
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="Padding" Value="0,0,100,0"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>
    </UserControl.Resources>
    
    <Grid Background="#f7f7f7">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <ScrollViewer
            Grid.Row="0" 
            Grid.Column="0"
            Grid.RowSpan="4"
        >
            <RichTextBox
                Margin="0,0,0,0" 
                Padding="50,50,50,100" 
                FontFamily="Trebuchet MS" 
                Background="#f7f7f7"
                IsReadOnly="True"
            >
                <FlowDocument>
                    <Paragraph Style="{StaticResource TextHeader}">
                        Wstęp, opis aplikacji
                    </Paragraph>
                    <Paragraph>
                        Ta aplikacja służy do znajdowania rozcięć w grafie. W planach jest jednak możliwość wyskalowania aplikacji tak, aby można było ilustrować na niej zastosowanie innych algorytmów, takich jak algorytmy Dijkstry, Prima, DFS, BFS, i tak dalej. Ale to już poza zaliczeniem projektu.
                    </Paragraph>
                    <Paragraph>
                        Aplikacja jest jednocześnie projektem zaliczeniowym na przedmiot “Grafy i Sieci” prowadzony przez prof. SGGW Aleksandra Prokopenyę. Autorami projektu są:
                    </Paragraph>
                    <List FontSize="18">
                        <ListItem>
                            <Paragraph>
                                Julia Popadowska
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                Aleksander Glebionek
                            </Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>
                                Dawid Wijata
                            </Paragraph>
                        </ListItem>
                    </List>
                    <Paragraph Style="{StaticResource TextHeader}" >
                        Jak dodać wierzchołek do grafu?
                    </Paragraph>
                    <Paragraph>
                        W trybie graficznym należy kliknąć przycisk “+” znajdujący się w praym dolnym rogu ekranu. Dalej kliknąć “Dodaj wierzchołek”. W trybie tekstowym, algorytm pobiera od razu całą macierz sąsiedztwa - aby dodać wierzchołek, starczy edytować zawartość macierzy.
                    </Paragraph>
                    <Paragraph Style="{StaticResource TextHeader}" >
                        Jak połączyć wierzchołki?
                    </Paragraph>
                    <Paragraph>
                        W trybie graficznym należy kliknąć przycisk “+” znajdujący się w praym dolnym rogu ekranu. Dalej kliknąć “Dodaj krawędź”. W trybie tekstowym, algorytm pobiera od razu całą macierz sąsiedztwa - aby dodać wierzchołek, starczy edytować zawartość macierzy.
                    </Paragraph>
                    <Paragraph Style="{StaticResource TextHeader}" >
                        Do czego służy tryb tekstowy? Przecież łatwiej i tak to wyklikać w GUI.
                    </Paragraph>
                    <Paragraph>
                        Tryb tekstowy daje przede wszystkim możliwość szybkiej obsługi poprzez wpisywanie ich tak, jakbyś realnie wpisał je do programu w jakimkolwiek nowoczesnym języku programowania (dwuwymiarowa tablica, itp.). Jeśli nie potrzebujesz tej warstwy wizualnej, albo chcesz na szybko przekleić output do swojego programu, który będzie to procesować dalej - tryb tekstowy jest świetnym pomysłem.
                    </Paragraph>
                </FlowDocument>
            </RichTextBox>
        </ScrollViewer>
    </Grid>
</UserControl>
